import numpy as np
import os
from sklearn.svm import SVC
import joblib
import cv2
from tqdm import tqdm


num_images_train = 1000
num_images_test = 250


image_pixels = []
labels = []


pastas = [
  r"C:\Users\gabis\PycharmProjects\pythonProject\imagens_capturadas_ausente_70",
  r"C:\Users\gabis\PycharmProjects\pythonProject\imagens_capturadas_parado_70",
  r"C:\Users\gabis\PycharmProjects\pythonProject\imagens_capturadas_agachado_70",
  r"C:\Users\gabis\PycharmProjects\pythonProject\imagens_capturadas_movimento_braco_70"
]


def mostrar_progresso(total, atual):
  print(f"Progresso: {atual}/{total} imagens carregadas.", end='\r')


for label, pasta in enumerate(pastas):
  for i in tqdm(range(1, num_images_train + 1)):
      image_filename = os.path.join(pasta, f"imagem_{i}.jpg")
      if os.path.exists(image_filename):
          image = cv2.imread(image_filename, 0) 
          pixels = image.reshape(-1)
          image_pixels.append(pixels)
          labels.append(label)




X_train = np.array(image_pixels)
y_train = np.array(labels)




image_pixels = []
labels = []




for label, pasta in enumerate(pastas):
  for i in tqdm(range(num_images_train + 1, num_images_train + num_images_test + 1)):
      image_filename = os.path.join(pasta, f"imagem_{i}.jpg")
      if os.path.exists(image_filename):
          image = cv2.imread(image_filename, 0)
          pixels = image.reshape(-1)
          image_pixels.append(pixels)
          labels.append(label)


X_test = np.array(image_pixels)
y_test = np.array(labels)


model = SVC()
model.fit(X_train, y_train)


print("\nTreinamento concluído.")


modelo_filename = "modelo_imagem_movimento.pkl"
joblib.dump(model, modelo_filename)


y_pred = model.predict(X_test)


rotulos_descricoes = {
  0: "Ausente",
  1: "Parado",
  2: "Agachado",
  3: "Movendo os braços"
}




rotulos = np.unique(y_test)
estatisticas = {}
for rotulo in rotulos:
  acertos = np.sum((y_pred == rotulo) & (y_test == rotulo))
  suposicoes = np.sum(y_pred == rotulo)
  confusoes = {}
  for outro_rotulo in rotulos:
      if outro_rotulo != rotulo:
          confusoes[outro_rotulo] = np.sum((y_pred == outro_rotulo) & (y_test == rotulo))
  estatisticas[rotulo] = {'Acertos': acertos, 'Suposicoes': suposicoes, 'Confusoes': confusoes}


for rotulo, estatistica in estatisticas.items():
  acertos = estatistica['Acertos']
  suposicoes = estatistica['Suposicoes']
  total = np.sum(y_test == rotulo)
  porcentagem_acertos = acertos / total * 100
  porcentagem_erros = 100 - porcentagem_acertos
  descricao_rotulo = rotulos_descricoes[rotulo]
  confusoes = estatistica['Confusoes']


  print("\n—————————————————————————————————————————————————————")
  print(f"( {descricao_rotulo} ): {porcentagem_acertos:.2f}% de acertos e {porcentagem_erros:.2f}% de erros")
  for outro_rotulo, quantidade in confusoes.items():
      descricao_outro_rotulo = rotulos_descricoes[outro_rotulo]
      print(f" → Confundiu com {descricao_outro_rotulo}: {quantidade} vezes")
  print(f" → Quantidade de acertos: {acertos}/{num_images_test}")
  print(f" → Total de suposições: {suposicoes}")


accuracy = np.sum(y_pred == y_test) / len(y_test)


print("\n—————————————————————————————————————————————————————")
print("Acurácia do modelo:", f"{accuracy * 100:.2f}%")
print("—————————————————————————————————————————————————————")

